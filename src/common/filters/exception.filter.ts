import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,   //object gi√∫p l·∫•y ra c√°c ƒë·ªëi t∆∞·ª£ng g·ªëc nh∆∞ request, response,...
  HttpException,  
  HttpStatus, 
} from '@nestjs/common';
import { Response } from 'express';
import { AppError } from '../errors/app.error';

@Catch() // cho nestJS bi·∫øt ƒë√¢y l√† class b·∫Øt v√† x·ª≠ l√Ω exception c·ªßa to√†n b·ªô h·ªá th·ªëng
export class CustomeExceptionFilter implements ExceptionFilter {  // class n√†y b·∫Øt bu·ªôc ph·∫£i c√≥ ph∆∞∆°ng th·ª©c catch ƒë·ªÉ x·ª≠ l√Ω l·ªói
  catch(exception: unknown, host: ArgumentsHost) {  // h√†m t·ª± ƒë·ªông ƒë∆∞·ª£c g·ªçi khi c√≥ l·ªói x√£y ra trong to√†n b·ªô ·ª©ng d·ª•ng
    const ctx = host.switchToHttp();  // chuy·ªÉn ng·ªØ c·∫£nh v·ªÅ HTTP ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p v√†o request, response c·ªßa express
    const response = ctx.getResponse<Response>(); // l·∫•y ra ƒë·ªëi t∆∞·ª£ng response, d√πng ƒë·ªÉ t·ª± g·ª≠i l·∫°i response JSON t√πy ch·ªânh cho client

    // m·∫∑c ƒë·ªãnh n·∫øu nh∆∞ kh√¥ng bi·∫øt l·ªói g√¨ th√¨ quƒÉng ra l·ªói l√† 500  
    let status = HttpStatus.INTERNAL_SERVER_ERROR;
    let message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
    let code: string | undefined = undefined;

    console.error('üî• ERROR:', exception);

    // m√¨nh s·∫Ω ∆∞u ti√™n x·ª≠ l√Ω AppError tr∆∞·ªõc 
    if (exception instanceof AppError){
      status = exception.statusCode;
      message = exception.message;
      code = exception.code;
    }
    else if (exception instanceof HttpException) {
      status = exception.getStatus();
      const res = exception.getResponse(); // ƒë√¢y l√† l·ªói m√† c√°i http ex tr·∫£ v·ªÅ

      if (typeof res === 'string') {
        message = res;
      }
      else if (typeof res === 'object' && (res as any).message){
        const msg = (res as any).message;
        // N·∫øu message l√† m·∫£ng (do class-validator tr·∫£ v·ªÅ), n·ªëi l·∫°i cho g·ªçn
        message = Array.isArray(msg) ? msg.join(', ') : msg;
      }
    }
    else // c√°c l·ªói c√≤n l·∫°i 
    {
      status = HttpStatus.INTERNAL_SERVER_ERROR;
      if (exception instanceof Error && exception.message) {
        message = `L·ªói h·ªá th·ªëng: ${exception.message}`;
      }
      else {
        message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      }
    }

    
    response.status(status).json({
      statusCode: status,
      message,
      code,
      data: null,
    });
  }
}
